version: "3.9"

services:
  db:
    image: postgres:16-alpine
    container_name: booking_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: booking_backend
    command: ["/app/entrypoint.sh"]
    env_file:
      - ./.env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      DB_HOST: db
      DB_PORT: 5432
      DJANGO_SUPERUSER_EMAIL: admin@bookpakistan.com
      DJANGO_SUPERUSER_PASSWORD: admin123
    volumes:
      - ./backend:/app
      - media:/app/media
      - static:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/schema/"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: booking_frontend
    env_file:
      - ./.env
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "3001:3000"
    depends_on:
      backend:
        condition: service_healthy

volumes:
  pgdata:
  media:
  static:
